/**
 * Integration tests for PowerBI Service with other services
 */

const PowerBIService = require('../../src-v2/services/powerbiService');
const cacheService = require('../../src-v2/services/cacheService');
const errorService = require('../../src-v2/services/errorService');
const fs = require('fs');
const path = require('path');

// Mock the PowerBI service to avoid making real API calls
jest.mock('../../src-v2/services/powerbiService');

describe('PowerBI Service Integration', () => {
    let powerbiService;
    let mockConfig;
    
    // Mock metadata response
    const mockMetadata = {
        dataset: { name: 'Store Sales' },
        tables: [
            { name: 'Sales', type: 'Table', columns: ['TotalSales', 'TotalUnits'] },
            { name: 'Time', type: 'Table', columns: ['Month', 'Quarter'] },
            { name: 'District', type: 'Table', columns: ['District', 'Region'] },
            { name: 'Category', type: 'Table', columns: ['Category', 'Subcategory'] },
            { name: 'Store', type: 'Table', columns: ['StoreName', 'StoreType'] }
        ],
        measures: ['TotalSales', 'TotalUnits'],
        dimensions: [
            'Time.Month', 'Time.Quarter', 'District.District', 'District.Region',
            'Category.Category', 'Category.Subcategory', 'Store.StoreName', 'Store.StoreType',
            'Sales.TotalSales', 'Sales.TotalUnits'
        ],
        lastUpdated: new Date().toISOString()
    };

    beforeEach(() => {
        // Clear any cached data
        cacheService.clearCache();

        // Reset all mocks
        jest.clearAllMocks();

        // Use mock config to avoid real authentication
        mockConfig = {
            clientId: 'test-client-id',
            tenantId: 'test-tenant-id',
            clientSecret: 'test-client-secret',
            authorityUrl: 'https://login.microsoftonline.com/',
            scopeBase: 'https://analysis.windows.net/powerbi/api/.default',
            powerBIGroupId: 'test-group-id',
            powerBIReportId: 'test-report-id'
        };

        // Create a mock implementation that properly mimics PowerBIService
        PowerBIService.mockImplementation((config) => ({
            config: config,
            getDatasetMetadata: jest.fn().mockResolvedValue(mockMetadata),
            getAccessToken: jest.fn().mockResolvedValue({ accessToken: 'mock-token' }),
            getRequestHeader: jest.fn().mockResolvedValue({ 'Authorization': 'Bearer mock-token' }),
            getEmbedInfo: jest.fn().mockResolvedValue({ embedUrl: 'mock-url' }),
            getSimplifiedMetadata: jest.fn().mockResolvedValue(mockMetadata),
            getNameOnlySchema: jest.fn().mockResolvedValue({
                tables: mockMetadata.tables,
                measures: mockMetadata.measures,
                dimensions: mockMetadata.dimensions
            })
        }));

        powerbiService = new PowerBIService(mockConfig);
    });

    describe('Configuration Integration', () => {
        it('should load configuration correctly', () => {
            expect(powerbiService.config).toEqual(mockConfig);
            expect(powerbiService.config.clientId).toBe('test-client-id');
            expect(powerbiService.config.powerBIGroupId).toBe('test-group-id');
        });

        it('should handle missing configuration gracefully', () => {
            const serviceWithoutConfig = new PowerBIService({});
            expect(serviceWithoutConfig.config).toEqual({});
        });
    });

    // Cache Service Integration tests removed - cache service is deprecated

    describe('Service Architecture Integration', () => {
        it('should work with the v2 service architecture', () => {
            // Verify service can be instantiated in v2 architecture
            expect(powerbiService).toBeInstanceOf(PowerBIService);
            
            // Verify it has all required methods
            expect(typeof powerbiService.getAccessToken).toBe('function');
            expect(typeof powerbiService.getRequestHeader).toBe('function');
            expect(typeof powerbiService.getEmbedInfo).toBe('function');
            expect(typeof powerbiService.getDatasetMetadata).toBe('function');
            expect(typeof powerbiService.getSimplifiedMetadata).toBe('function');
            expect(typeof powerbiService.getNameOnlySchema).toBe('function');
        });

        it('should be compatible with error service patterns', async () => {
            // Test error handling follows errorService patterns
            try {
                // This should fail due to missing MSAL token
                await powerbiService.getAccessToken();
            } catch (error) {
                // Verify error is properly structured
                expect(error).toBeInstanceOf(Error);
                expect(error.message).toBeDefined();
            }
        });
    });

    describe('Metadata Processing Integration', () => {
        it('should process metadata consistently across formats', async () => {
            const completeMetadata = await powerbiService.getDatasetMetadata('group-id', 'dataset-id');
            const simplifiedMetadata = await powerbiService.getSimplifiedMetadata('group-id', 'dataset-id');
            const schemaMetadata = await powerbiService.getNameOnlySchema('group-id', 'dataset-id');

            // Verify all formats contain core information
            expect(completeMetadata.dataset.name).toBe('Store Sales');
            expect(simplifiedMetadata).toContain('Store Sales');
            expect(schemaMetadata).toContain('Sales.TotalSales');

            // Verify consistent table count across formats
            expect(completeMetadata.tables).toHaveLength(5);
            // Count tables in simplified format by counting table entries like "- TableName (type):"
            const tableMatches = simplifiedMetadata.match(/^- \w+ \(\w+\):/gm);
            expect(tableMatches).toHaveLength(5);
        });

        it('should maintain data consistency in different formats', async () => {
            const metadata = await powerbiService.getDatasetMetadata('group-id', 'dataset-id');
            const simplified = await powerbiService.getSimplifiedMetadata('group-id', 'dataset-id');
            const schema = await powerbiService.getNameOnlySchema('group-id', 'dataset-id');

            // Check that Sales table data is consistent
            const salesTable = metadata.tables.find(t => t.name === 'Sales');
            expect(salesTable).toBeDefined();
            expect(salesTable.columns).toHaveLength(2);

            expect(simplified).toContain('Sales (fact)');
            expect(simplified).toContain('TotalUnits (number)');
            expect(simplified).toContain('TotalSales (currency)');

            expect(schema).toContain('Sales.TotalUnits [number]');
            expect(schema).toContain('Sales.TotalSales [currency]');
        });
    });

    describe('Service Dependencies', () => {
        it('should handle service instantiation with different configurations', () => {
            const configs = [
                mockConfig,
                { ...mockConfig, powerBIGroupId: 'different-group' },
                { ...mockConfig, powerBIReportId: 'different-report' },
                {}
            ];

            configs.forEach((config, index) => {
                const service = new PowerBIService(config);
                expect(service).toBeInstanceOf(PowerBIService);
                expect(service.config).toEqual(config);
            });
        });
    });

    describe('File System Integration', () => {
        it('should exist in correct service directory structure', () => {
            const servicePath = path.join(__dirname, '../../src-v2/services/powerbiService.js');
            expect(fs.existsSync(servicePath)).toBe(true);
            
            const content = fs.readFileSync(servicePath, 'utf8');
            expect(content).toContain('class PowerBIService');
            expect(content).toContain('module.exports = PowerBIService');
        });

        it('should have proper service imports', () => {
            const servicePath = path.join(__dirname, '../../src-v2/services/powerbiService.js');
            const content = fs.readFileSync(servicePath, 'utf8');
            
            expect(content).toContain("require('./configService')");
            expect(content).toContain("require('@azure/msal-node')");
            expect(content).toContain("require('node-fetch')");
            // cacheService has been deprecated and removed from imports
        });
    });
});